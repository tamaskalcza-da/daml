# Azure Pipelines file, see https://aka.ms/yaml

# Enable builds on all branches
trigger:
  # Build every commit as our release process relies on
  # the release process being built alone.
  batch: false
  branches:
    include:
      - master

# Enable PR triggers that target the master branch
pr:
  autoCancel: true # cancel previous builds on push
  branches:
    include:
      - master

jobs:
  - job: get_git_sha
    pool:
      name: "linux-pool"
    steps:
      - bash: |
          set -euo pipefail
          echo "##vso[task.setvariable variable=git_sha;isOutput=true]$(git rev-parse 'HEAD^2')"

  - job: collect_build_data
    condition: always()
    dependsOn:
      - get_git_sha
    pool:
      name: "linux-pool"
    variables:
      # Using expression syntax so we get an empty string if not set, rather
      # than the raw $(VarName) string. Expression syntax works on the
      # variables key, but not on the env one, so we need an extra indirection.
      # Note: These Azure variables are only set for PR builds.
      pr.num: $[ variables['System.PullRequest.PullRequestNumber'] ]
      pr.branch: $[ variables['System.PullRequest.SourceBranch'] ]
      git_sha: $[ dependencies.get_git_sha.git_sha ]
    steps:
      # some change in Azure configuration makes this fail recently (2020-01).
      # Azure runs PR builds not on the PR commit, but on the GitHub-provided
      # commit that would be the result of merging the PR. Recently, it looks
      # like when it reaches the point of running this job (which has to run
      # after the macOS one, which sometimes takes up to an hour), if master
      # has changed in the meantime, Azure cannot find the commit it wants to
      # build anymore. Therefore, we tell it not to checkout anything, and
      # manually checkout the PR commit.
      - checkout: self
      - bash: |
          set -euo pipefail
          eval "$(./dev-env/bin/dade-assist)"

          echo "Build.SourceVersion: $(Build.SourceVersion)"
          echo "git_sha: $git_sha"


          tell_slack () {
            local MESSAGE=$1
            curl -XPOST \
                 -i \
                 -H 'Content-type: application/json' \
                 --data "{\"text\":\"<!here> *FAILED* $(Agent.JobName): <https://dev.azure.com/digitalasset/daml/_build/results?buildId=$(Build.BuildId)|$MESSAGE>\n\"}" \
                 $(Slack.URL)
          }
          echo "Build.QueuedBy: $(Build.QueuedBy)"
          echo "Build.QueuedById: $(Build.QueuedById)"
          echo "Build.RequestedFor: $(Build.RequestedFor)"
          echo "Build.RequestedForEmail: $(Build.RequestedForEmail)"
          echo "Build.RequestedForId: $(Build.RequestedForEmail)"

          REPORT=$(mktemp)
        env:
          GOOGLE_APPLICATION_CREDENTIALS_CONTENT: $(GOOGLE_APPLICATION_CREDENTIALS_CONTENT)
          # Commit message is always set
          COMMIT_MSG: $(Build.SourceVersionMessage)
          # Because these variables are always set (in the variables block),
          # hopefully these should be set as expected (i.e. either correct
          # value or empty string, but not $(Azure.Variable.Name)).
          PR_NUM: $(pr.num)
          PR_BRANCH: $(pr.branch)
